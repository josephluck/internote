export type Stage = "prod" | "dev" | "cdk-experiment" | "cdk-test";

export type NodeEnvironment = "development" | "production";

/**
 * The entire possible environment for the stack
 */
export type Env = {
  /**
   * The name of the state of the deployment
   */
  STAGE: Stage;
  /**
   * Used to package appropriately
   */
  NODE_ENV: NodeEnvironment;

  /**
   * Sentry auth token
   */
  SENTRY_AUTH_TOKEN: string;
  /**
   * Sentry DSN
   */
  SENTRY_DSN: string;
  /**
   * Sentry organisation
   */
  SENTRY_ORG: string;
  /**
   * Sentry project
   */
  SENTRY_PROJECT: string;

  /**
   * The API gateway domain. Includes `https://` and the trailing `/`
   *
   * e.g. `https://services.internote.app/` or
   * e.g. `https://elrgi28lcj.execute-api.eu-west-1.amazonaws.com/prod/`
   *
   * Note that the front-end removes the leading `https://` and trailing `/` as
   * part of the AWS4 signing process.
   */
  SERVICES_HOST: string;
  /**
   * The AWS region the deployment resides in
   */
  SERVICES_REGION: string;
  /**
   * The dynamodb endpoint
   * TODO: this is currently not used
   */
  DYNAMO_ENDPOINT: string;
  /**
   * The e-mail address that Internote sends emails from.
   */
  SES_FROM_ADDRESS: string;

  /**
   * The cognito identity pool ID
   */
  COGNITO_IDENTITY_POOL_ID: string;
  /**
   * The user pool client id
   */
  COGNITO_USER_POOL_CLIENT_ID: string;
  /**
   * The user pool id
   */
  COGNITO_USER_POOL_ID: string;

  /**
   * The name of the S3 bucket that files are uploaded to
   */
  ATTACHMENTS_BUCKET_NAME: string;

  /**
   * The name of the S3 bucket that generated speech files are stored in to
   */
  SPEECH_BUCKET_NAME: string;

  /**
   * The name of the preferences dynamo table
   */
  PREFERENCES_TABLE_NAME: string;
  /**
   * The partition key of the preferences table
   */
  PREFERENCES_TABLE_PARTITION_KEY: "id";

  /**
   * The name of the notes dynamo table
   */
  NOTES_TABLE_NAME: string;
  /**
   * The partition key of the notes table
   */
  NOTES_TABLE_PARTITION_KEY: "noteId";
  /**
   * The sort key of the notes table
   */
  NOTES_TABLE_SORT_KEY: "userId";
  /**
   * The name of the userId -> noteId index (used to query notes for a user)
   */
  NOTES_TABLE_USER_ID_INDEX: string;

  /**
   * The name of the notes dynamo table
   */
  SNIPPETS_TABLE_NAME: string;
  /**
   * The partition key of the notes table
   */
  SNIPPETS_TABLE_PARTITION_KEY: "snippetId";
  /**
   * The sort key of the notes table
   */
  SNIPPETS_TABLE_SORT_KEY: "userId";
  /**
   * The name of the userId -> noteId index (used to query notes for a user)
   */
  SNIPPETS_TABLE_USER_ID_INDEX: string;

  /**
   * The oxford API id
   */
  OXFORD_API_ID: string;
  /**
   * The oxford API key
   */
  OXFORD_API_KEY: string;

  /**
   * The name of the S3 bucket exported notes are stored in
   */
  EXPORT_BUCKET_NAME: string;
};

/**
 * Env variables that are stored in AWS SSM
 */
export type EnvGenerated = Pick<
  Env,
  | "ATTACHMENTS_BUCKET_NAME"
  | "EXPORT_BUCKET_NAME"
  | "ATTACHMENTS_BUCKET_NAME"
  | "COGNITO_IDENTITY_POOL_ID"
  | "COGNITO_USER_POOL_CLIENT_ID"
  | "COGNITO_USER_POOL_ID"
  | "NOTES_TABLE_NAME"
  | "NOTES_TABLE_PARTITION_KEY"
  | "NOTES_TABLE_SORT_KEY"
  | "NOTES_TABLE_USER_ID_INDEX"
  | "PREFERENCES_TABLE_NAME"
  | "PREFERENCES_TABLE_PARTITION_KEY"
  | "SERVICES_HOST"
  | "SES_FROM_ADDRESS"
  | "SNIPPETS_TABLE_NAME"
  | "SNIPPETS_TABLE_PARTITION_KEY"
  | "SNIPPETS_TABLE_SORT_KEY"
  | "SNIPPETS_TABLE_USER_ID_INDEX"
  | "SPEECH_BUCKET_NAME"
>;

/**
 * Env variables that are not generated by CDK
 */
export type EnvNonGenerated = Pick<
  Env,
  | "SENTRY_AUTH_TOKEN"
  | "SENTRY_DSN"
  | "SENTRY_ORG"
  | "SENTRY_PROJECT"
  | "SERVICES_REGION"
  | "STAGE"
  | "OXFORD_API_ID"
  | "OXFORD_API_KEY"
  | "NODE_ENV"
>;

/**
 * Env variables that should be kept secret (not exposed publicly)
 */
export type EnvSecret = Pick<Env, "SENTRY_AUTH_TOKEN">;

/**
 * Validates and returns a type-safe environment object from the given keys
 * and environment e.g:
 *
 * getEnv(["STAGE", "SERVICES_REGION"], process.env)
 */
export const getEnv = <K extends keyof Env>(
  keys: K[],
  env: unknown
): { [P in typeof keys[number]]: Env[P] } => {
  keys.forEach((key) => {
    if (!env[key]) {
      throw new Error(`Missing ${key} from env`);
    }
  });
  return keys.reduce((acc, key) => ({ ...acc, [key]: env[key] }), {}) as any;
};

/** TODO: deprecate and use getEnv directly */
export const validateProcessEnv = (keys: (keyof Env)[]) =>
  getEnv(keys, process.env);
