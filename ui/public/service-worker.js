!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){e.exports=require("url-pattern")},function(e,t,n){"use strict";n.r(t),n.d(t,"foo",function(){return i});var r=n(0),o=n.n(r);const u=(e,...t)=>console.log(`[SW] ${e}`,...t);self.addEventListener("fetch",async e=>{const t=l([{path:"notes/:id",handler:async e=>{u("Handling fetch request",{event:e}),u("Slept for 5s");const t=await fetch(e.request);return u("Response",{response:t}),t}}]);e.waitUntil(t(e))}),self.addEventListener("activate",()=>self.clients.claim());const i=null,l=e=>t=>{const n=e.map(e=>{return new o.a(e.path).match(t.request.url)}).find(e=>!!e);n?t.waitUntil(n.handler(t)):t.waitUntil(fetch(t.request))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,