{
  "service": {
    "service": "internote-ui",
    "serviceObject": {
      "name": "internote-ui"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "runtime": "nodejs8.10",
      "region": "eu-west-1",
      "memorySize": 256,
      "timeout": 30,
      "apiGateway": {
        "minimumCompressionSize": 1024
      },
      "environment": {
        "ATTACHMENTS_BUCKET_NAME": "internote-dev-services-attachments",
        "COGNITO_IDENTITY_POOL_ID": "eu-west-1:78cf6f87-4b8c-462a-bb67-a75b160e8b52",
        "COGNITO_USER_POOL_CLIENT_ID": "3k5v2f15dfsfl80mcdv7u114ch",
        "COGNITO_USER_POOL_ID": "eu-west-1_nJU3XXsMk",
        "SERVICES_HOST": "dev-services.internote.app",
        "SERVICES_REGION": "eu-west-1",
        "SPEECH_BUCKET_NAME": "internote-dev-services-speech-audio-files",
        "STAGE": "dev"
      },
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "NotDashfoundLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/internote-ui-dev-not-found"
            }
          },
          "AuthenticateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/internote-ui-dev-authenticate"
            }
          },
          "IndexLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/internote-ui-dev-index"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "internote-ui",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/internote-ui-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/internote-ui-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "internote-ui",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "NotDashfoundLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/internote-ui/dev/1568376797266-2019-09-13T12:13:17.266Z/internote-ui.zip"
              },
              "FunctionName": "internote-ui-dev-not-found",
              "Handler": "sls-next-build/_error.render",
              "MemorySize": 256,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "ATTACHMENTS_BUCKET_NAME": "internote-dev-services-attachments",
                  "COGNITO_IDENTITY_POOL_ID": "eu-west-1:78cf6f87-4b8c-462a-bb67-a75b160e8b52",
                  "COGNITO_USER_POOL_CLIENT_ID": "3k5v2f15dfsfl80mcdv7u114ch",
                  "COGNITO_USER_POOL_ID": "eu-west-1_nJU3XXsMk",
                  "SERVICES_HOST": "dev-services.internote.app",
                  "SERVICES_REGION": "eu-west-1",
                  "SPEECH_BUCKET_NAME": "internote-dev-services-speech-audio-files",
                  "STAGE": "dev"
                }
              }
            },
            "DependsOn": [
              "NotDashfoundLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "NotDashfoundLambdaVersionIUiA45M3L2z4uhWfW4m33uE2TRJzJZ1D0XyjoEKY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NotDashfoundLambdaFunction"
              },
              "CodeSha256": "Y85VZ3+p/DC/hYf9U29G6raiT1dQiH2mFG4LkJ22b6U="
            }
          },
          "AuthenticateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/internote-ui/dev/1568376797266-2019-09-13T12:13:17.266Z/internote-ui.zip"
              },
              "FunctionName": "internote-ui-dev-authenticate",
              "Handler": "sls-next-build/authenticate.render",
              "MemorySize": 256,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "ATTACHMENTS_BUCKET_NAME": "internote-dev-services-attachments",
                  "COGNITO_IDENTITY_POOL_ID": "eu-west-1:78cf6f87-4b8c-462a-bb67-a75b160e8b52",
                  "COGNITO_USER_POOL_CLIENT_ID": "3k5v2f15dfsfl80mcdv7u114ch",
                  "COGNITO_USER_POOL_ID": "eu-west-1_nJU3XXsMk",
                  "SERVICES_HOST": "dev-services.internote.app",
                  "SERVICES_REGION": "eu-west-1",
                  "SPEECH_BUCKET_NAME": "internote-dev-services-speech-audio-files",
                  "STAGE": "dev"
                }
              }
            },
            "DependsOn": [
              "AuthenticateLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AuthenticateLambdaVersionjbCfcPR0CFR2OUBxRVHFH4s8j17kwleuec9Wz1c1I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthenticateLambdaFunction"
              },
              "CodeSha256": "Y85VZ3+p/DC/hYf9U29G6raiT1dQiH2mFG4LkJ22b6U="
            }
          },
          "IndexLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/internote-ui/dev/1568376797266-2019-09-13T12:13:17.266Z/internote-ui.zip"
              },
              "FunctionName": "internote-ui-dev-index",
              "Handler": "sls-next-build/index.render",
              "MemorySize": 256,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "ATTACHMENTS_BUCKET_NAME": "internote-dev-services-attachments",
                  "COGNITO_IDENTITY_POOL_ID": "eu-west-1:78cf6f87-4b8c-462a-bb67-a75b160e8b52",
                  "COGNITO_USER_POOL_CLIENT_ID": "3k5v2f15dfsfl80mcdv7u114ch",
                  "COGNITO_USER_POOL_ID": "eu-west-1_nJU3XXsMk",
                  "SERVICES_HOST": "dev-services.internote.app",
                  "SERVICES_REGION": "eu-west-1",
                  "SPEECH_BUCKET_NAME": "internote-dev-services-speech-audio-files",
                  "STAGE": "dev"
                }
              }
            },
            "DependsOn": [
              "IndexLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "IndexLambdaVersionbR5G9XESxjpAFGdSjvF8UvEWgtDHFl8JnxSo0oRl2M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "IndexLambdaFunction"
              },
              "CodeSha256": "Y85VZ3+p/DC/hYf9U29G6raiT1dQiH2mFG4LkJ22b6U="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-internote-ui",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "MinimumCompressionSize": 1024
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthenticate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "authenticate",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "NotDashfoundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodProxyVarHead": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "HEAD",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "NotDashfoundLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAuthenticateGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthenticateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAuthenticateHead": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "HEAD",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthenticate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthenticateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "IndexLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodHead": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "HEAD",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "IndexLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1568376682338": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodProxyVarGet",
              "ApiGatewayMethodProxyVarHead",
              "ApiGatewayMethodAuthenticateGet",
              "ApiGatewayMethodAuthenticateHead",
              "ApiGatewayMethodGet",
              "ApiGatewayMethodHead"
            ]
          },
          "NotDashfoundLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NotDashfoundLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthenticateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthenticateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "IndexLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "IndexLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "NextStaticAssetsS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "AccessControl": "PublicRead",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ],
                    "ExposedHeaders": [
                      "Date"
                    ],
                    "Id": "NextStaticAssetsS3BucketId1",
                    "MaxAge": "3600"
                  }
                ]
              },
              "BucketName": "internote-dev-ui-static",
              "WebsiteConfiguration": {
                "IndexDocument": "index.html",
                "ErrorDocument": "error.html"
              }
            },
            "DeletionPolicy": "Retain"
          },
          "NextjsCloudFront": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
              "DistributionConfig": {
                "Origins": [
                  {
                    "DomainName": "internote-dev-ui-static.s3.amazonaws.com",
                    "Id": "S3Origin",
                    "S3OriginConfig": {
                      "OriginAccessIdentity": ""
                    }
                  },
                  {
                    "DomainName": "internote-dev-ui-static.s3.amazonaws.com",
                    "Id": "S3PublicOrigin",
                    "OriginPath": "/public",
                    "S3OriginConfig": {
                      "OriginAccessIdentity": ""
                    }
                  },
                  {
                    "DomainName": {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.eu-west-1.amazonaws.com"
                        ]
                      ]
                    },
                    "Id": "ApiGatewayOrigin",
                    "OriginPath": "/dev",
                    "CustomOriginConfig": {
                      "HTTPSPort": 443,
                      "OriginProtocolPolicy": "https-only"
                    }
                  }
                ],
                "Enabled": "true",
                "DefaultCacheBehavior": {
                  "AllowedMethods": [
                    "GET",
                    "HEAD",
                    "OPTIONS",
                    "PUT",
                    "PATCH",
                    "POST",
                    "DELETE"
                  ],
                  "TargetOriginId": "ApiGatewayOrigin",
                  "Compress": "true",
                  "ForwardedValues": {
                    "QueryString": "true",
                    "Cookies": {
                      "Forward": "all"
                    }
                  },
                  "ViewerProtocolPolicy": "https-only"
                },
                "CacheBehaviors": [
                  {
                    "AllowedMethods": [
                      "GET",
                      "HEAD",
                      "OPTIONS"
                    ],
                    "TargetOriginId": "S3Origin",
                    "Compress": "true",
                    "ForwardedValues": {
                      "QueryString": "false",
                      "Cookies": {
                        "Forward": "none"
                      }
                    },
                    "ViewerProtocolPolicy": "https-only",
                    "MinTTL": "50",
                    "PathPattern": "static/*"
                  },
                  {
                    "AllowedMethods": [
                      "GET",
                      "HEAD",
                      "OPTIONS"
                    ],
                    "TargetOriginId": "S3Origin",
                    "Compress": "true",
                    "ForwardedValues": {
                      "QueryString": "false",
                      "Cookies": {
                        "Forward": "none"
                      }
                    },
                    "ViewerProtocolPolicy": "https-only",
                    "MinTTL": "50",
                    "PathPattern": "_next/*"
                  },
                  {
                    "AllowedMethods": [
                      "GET",
                      "HEAD",
                      "OPTIONS"
                    ],
                    "TargetOriginId": "S3PublicOrigin",
                    "Compress": true,
                    "ForwardedValues": {
                      "QueryString": "false",
                      "Cookies": {
                        "Forward": "none"
                      }
                    },
                    "ViewerProtocolPolicy": "https-only",
                    "MinTTL": "50",
                    "PathPattern": "service-worker.js"
                  }
                ],
                "PriceClass": "PriceClass_100",
                "Aliases": [
                  "dev.internote.app"
                ],
                "ViewerCertificate": {
                  "AcmCertificateArn": "arn:aws:acm:us-east-1:822567739604:certificate/cba4ce61-ca15-4d6b-8eac-3569e4eae88b",
                  "SslSupportMethod": "sni-only"
                }
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "NotDashfoundLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NotDashfoundLambdaVersionIUiA45M3L2z4uhWfW4m33uE2TRJzJZ1D0XyjoEKY"
            }
          },
          "AuthenticateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthenticateLambdaVersionjbCfcPR0CFR2OUBxRVHFH4s8j17kwleuec9Wz1c1I"
            }
          },
          "IndexLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "IndexLambdaVersionbR5G9XESxjpAFGdSjvF8UvEWgtDHFl8JnxSo0oRl2M"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          },
          "NextStaticAssetsS3BucketWebsiteURL": {
            "Value": {
              "Fn::GetAtt": [
                "NextStaticAssetsS3Bucket",
                "WebsiteURL"
              ]
            },
            "Description": "URL for the S3 website hosting the static assets"
          },
          "NextStaticAssetsS3BucketSecureURL": {
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "NextStaticAssetsS3Bucket",
                      "DomainName"
                    ]
                  }
                ]
              ]
            },
            "Description": "S3 Bucket which holds the static assets"
          },
          "NextjsCloudFrontURL": {
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "NextjsCloudFront",
                      "DomainName"
                    ]
                  }
                ]
              ]
            },
            "Description": "CloudFront distribution URL"
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "NextStaticAssetsS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "AccessControl": "PublicRead",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ],
                    "ExposedHeaders": [
                      "Date"
                    ],
                    "Id": "NextStaticAssetsS3BucketId1",
                    "MaxAge": "3600"
                  }
                ]
              },
              "BucketName": "internote-dev-ui-static",
              "WebsiteConfiguration": {
                "IndexDocument": "index.html",
                "ErrorDocument": "error.html"
              }
            },
            "DeletionPolicy": "Retain"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "NextStaticAssetsS3BucketWebsiteURL": {
            "Value": {
              "Fn::GetAtt": [
                "NextStaticAssetsS3Bucket",
                "WebsiteURL"
              ]
            },
            "Description": "URL for the S3 website hosting the static assets"
          },
          "NextStaticAssetsS3BucketSecureURL": {
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "NextStaticAssetsS3Bucket",
                      "DomainName"
                    ]
                  }
                ]
              ]
            },
            "Description": "S3 Bucket which holds the static assets"
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "stage": "dev",
      "domains": {
        "prod": "internote.app",
        "dev": "dev.internote.app"
      },
      "storybookDomains": {
        "prod": "storybook.internote.app",
        "dev": "dev-storybook.internote.app"
      },
      "assetsBucketNames": {
        "prod": "internote-prod-ui-static",
        "dev": "internote-dev-ui-static"
      },
      "storybookBucketNames": {
        "prod": "internote-prod-storybook",
        "dev": "internote-dev-storybook"
      },
      "serverless-nextjs": {
        "createAssetBucket": true,
        "assetsBucketName": "internote-dev-ui-static",
        "cloudFront": {
          "Properties": {
            "DistributionConfig": {
              "Aliases": [
                "dev.internote.app"
              ],
              "ViewerCertificate": {
                "AcmCertificateArn": "arn:aws:acm:us-east-1:822567739604:certificate/cba4ce61-ca15-4d6b-8eac-3569e4eae88b",
                "SslSupportMethod": "sni-only"
              }
            }
          }
        }
      },
      "client": {
        "bucketName": "internote-dev-storybook",
        "distributionFolder": "storybook-static"
      }
    },
    "plugins": [
      "serverless-plugin-monorepo",
      "serverless-plugin-include-dependencies",
      "serverless-nextjs-plugin",
      "serverless-finch"
    ],
    "pluginsData": {},
    "functions": {
      "not-found": {
        "handler": "sls-next-build/_error.render",
        "events": [
          {
            "http": {
              "path": "{proxy+}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "{proxy+}",
              "method": "head",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "internote-ui-dev-not-found",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "authenticate": {
        "handler": "sls-next-build/authenticate.render",
        "events": [
          {
            "http": {
              "path": "authenticate",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "authenticate",
              "method": "head",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "internote-ui-dev-authenticate",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "index": {
        "handler": "sls-next-build/index.render",
        "events": [
          {
            "http": {
              "path": "",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "",
              "method": "head",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "internote-ui-dev-index",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs8.10",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "NextStaticAssetsS3Bucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "AccessControl": "PublicRead",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET"
                  ],
                  "AllowedOrigins": [
                    "*"
                  ],
                  "ExposedHeaders": [
                    "Date"
                  ],
                  "Id": "NextStaticAssetsS3BucketId1",
                  "MaxAge": "3600"
                }
              ]
            },
            "BucketName": "internote-dev-ui-static",
            "WebsiteConfiguration": {
              "IndexDocument": "index.html",
              "ErrorDocument": "error.html"
            }
          },
          "DeletionPolicy": "Retain"
        },
        "NextjsCloudFront": {
          "Type": "AWS::CloudFront::Distribution",
          "Properties": {
            "DistributionConfig": {
              "Origins": [
                {
                  "DomainName": "internote-dev-ui-static.s3.amazonaws.com",
                  "Id": "S3Origin",
                  "S3OriginConfig": {
                    "OriginAccessIdentity": ""
                  }
                },
                {
                  "DomainName": "internote-dev-ui-static.s3.amazonaws.com",
                  "Id": "S3PublicOrigin",
                  "OriginPath": "/public",
                  "S3OriginConfig": {
                    "OriginAccessIdentity": ""
                  }
                },
                {
                  "DomainName": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Ref": "ApiGatewayRestApi"
                        },
                        ".execute-api.eu-west-1.amazonaws.com"
                      ]
                    ]
                  },
                  "Id": "ApiGatewayOrigin",
                  "OriginPath": "/dev",
                  "CustomOriginConfig": {
                    "HTTPSPort": 443,
                    "OriginProtocolPolicy": "https-only"
                  }
                }
              ],
              "Enabled": "true",
              "DefaultCacheBehavior": {
                "AllowedMethods": [
                  "GET",
                  "HEAD",
                  "OPTIONS",
                  "PUT",
                  "PATCH",
                  "POST",
                  "DELETE"
                ],
                "TargetOriginId": "ApiGatewayOrigin",
                "Compress": "true",
                "ForwardedValues": {
                  "QueryString": "true",
                  "Cookies": {
                    "Forward": "all"
                  }
                },
                "ViewerProtocolPolicy": "https-only"
              },
              "CacheBehaviors": [
                {
                  "AllowedMethods": [
                    "GET",
                    "HEAD",
                    "OPTIONS"
                  ],
                  "TargetOriginId": "S3Origin",
                  "Compress": "true",
                  "ForwardedValues": {
                    "QueryString": "false",
                    "Cookies": {
                      "Forward": "none"
                    }
                  },
                  "ViewerProtocolPolicy": "https-only",
                  "MinTTL": "50",
                  "PathPattern": "static/*"
                },
                {
                  "AllowedMethods": [
                    "GET",
                    "HEAD",
                    "OPTIONS"
                  ],
                  "TargetOriginId": "S3Origin",
                  "Compress": "true",
                  "ForwardedValues": {
                    "QueryString": "false",
                    "Cookies": {
                      "Forward": "none"
                    }
                  },
                  "ViewerProtocolPolicy": "https-only",
                  "MinTTL": "50",
                  "PathPattern": "_next/*"
                },
                {
                  "AllowedMethods": [
                    "GET",
                    "HEAD",
                    "OPTIONS"
                  ],
                  "TargetOriginId": "S3PublicOrigin",
                  "Compress": true,
                  "ForwardedValues": {
                    "QueryString": "false",
                    "Cookies": {
                      "Forward": "none"
                    }
                  },
                  "ViewerProtocolPolicy": "https-only",
                  "MinTTL": "50",
                  "PathPattern": "service-worker.js"
                }
              ],
              "PriceClass": "PriceClass_100",
              "Aliases": [
                "dev.internote.app"
              ],
              "ViewerCertificate": {
                "AcmCertificateArn": "arn:aws:acm:us-east-1:822567739604:certificate/cba4ce61-ca15-4d6b-8eac-3569e4eae88b",
                "SslSupportMethod": "sni-only"
              }
            }
          }
        }
      },
      "Outputs": {
        "NextStaticAssetsS3BucketWebsiteURL": {
          "Value": {
            "Fn::GetAtt": [
              "NextStaticAssetsS3Bucket",
              "WebsiteURL"
            ]
          },
          "Description": "URL for the S3 website hosting the static assets"
        },
        "NextStaticAssetsS3BucketSecureURL": {
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "NextStaticAssetsS3Bucket",
                    "DomainName"
                  ]
                }
              ]
            ]
          },
          "Description": "S3 Bucket which holds the static assets"
        },
        "NextjsCloudFrontURL": {
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "NextjsCloudFront",
                    "DomainName"
                  ]
                }
              ]
            ]
          },
          "Description": "CloudFront distribution URL"
        }
      },
      "AWSTemplateFormatVersion": "2010-09-09"
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "artifact": "/home/josephreubenluck/code/internote/ui/.serverless/internote-ui.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/internote-ui/dev/1568376797266-2019-09-13T12:13:17.266Z",
    "artifact": "internote-ui.zip"
  }
}