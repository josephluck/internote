{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "AuthPreSignUpLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/internote-auth-service-dev-authPreSignUp"
      }
    },
    "DefineAuthChallengeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/internote-auth-service-dev-defineAuthChallenge"
      }
    },
    "CreateAuthChallengeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/internote-auth-service-dev-createAuthChallenge"
      }
    },
    "VerifyAuthChallengeResponseLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/internote-auth-service-dev-verifyAuthChallengeResponse"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "internote-auth-service",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/internote-auth-service-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/internote-auth-service-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail"
                  ],
                  "Resource": [
                    "arn:aws:ses:eu-west-1:*:*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "internote-auth-service",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AuthPreSignUpLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/internote-auth-service/dev/1592677438533-2020-06-20T18:23:58.533Z/internote-auth-service.zip"
        },
        "FunctionName": "internote-auth-service-dev-authPreSignUp",
        "Handler": "pre-sign-up.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SES_FROM_ADDRESS": "no-reply@internote.app"
          }
        }
      },
      "DependsOn": [
        "AuthPreSignUpLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "AuthPreSignUpLambdaVersioneeiBp7nqDnDw0HYfzfxJdrhm3RWXy96wsDIpWsaQk4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthPreSignUpLambdaFunction"
        },
        "CodeSha256": "t3huo8Zls0wx9PRjozBU6e4rAjCQeSw7Sag1pxFK8Lc="
      }
    },
    "DefineAuthChallengeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/internote-auth-service/dev/1592677438533-2020-06-20T18:23:58.533Z/internote-auth-service.zip"
        },
        "FunctionName": "internote-auth-service-dev-defineAuthChallenge",
        "Handler": "define-auth-challenge.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SES_FROM_ADDRESS": "no-reply@internote.app"
          }
        }
      },
      "DependsOn": [
        "DefineAuthChallengeLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "DefineAuthChallengeLambdaVersionLm7Y5tLGIyo7AGVcX6kiMLbCumztyl0cO8ZnyK8nM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DefineAuthChallengeLambdaFunction"
        },
        "CodeSha256": "t3huo8Zls0wx9PRjozBU6e4rAjCQeSw7Sag1pxFK8Lc="
      }
    },
    "CreateAuthChallengeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/internote-auth-service/dev/1592677438533-2020-06-20T18:23:58.533Z/internote-auth-service.zip"
        },
        "FunctionName": "internote-auth-service-dev-createAuthChallenge",
        "Handler": "create-auth-challenge.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SES_FROM_ADDRESS": "no-reply@internote.app"
          }
        }
      },
      "DependsOn": [
        "CreateAuthChallengeLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CreateAuthChallengeLambdaVersionk4s5j8dkRLTF9M1zsGVvvoTbhC0tsyDr3sLEgGW1uTs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateAuthChallengeLambdaFunction"
        },
        "CodeSha256": "t3huo8Zls0wx9PRjozBU6e4rAjCQeSw7Sag1pxFK8Lc="
      }
    },
    "VerifyAuthChallengeResponseLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/internote-auth-service/dev/1592677438533-2020-06-20T18:23:58.533Z/internote-auth-service.zip"
        },
        "FunctionName": "internote-auth-service-dev-verifyAuthChallengeResponse",
        "Handler": "verify-auth-challenge-response.handler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SES_FROM_ADDRESS": "no-reply@internote.app"
          }
        }
      },
      "DependsOn": [
        "VerifyAuthChallengeResponseLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "VerifyAuthChallengeResponseLambdaVersionvyFp54OSYFvPwPh01c7m4WG5B5L9dpRvWkOt0IX0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VerifyAuthChallengeResponseLambdaFunction"
        },
        "CodeSha256": "t3huo8Zls0wx9PRjozBU6e4rAjCQeSw7Sag1pxFK8Lc="
      }
    },
    "CognitoUserPoolCognitoUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "dev-internote-user-pool",
        "LambdaConfig": {
          "PreSignUp": {
            "Fn::GetAtt": [
              "AuthPreSignUpLambdaFunction",
              "Arn"
            ]
          },
          "DefineAuthChallenge": {
            "Fn::GetAtt": [
              "DefineAuthChallengeLambdaFunction",
              "Arn"
            ]
          },
          "CreateAuthChallenge": {
            "Fn::GetAtt": [
              "CreateAuthChallengeLambdaFunction",
              "Arn"
            ]
          },
          "VerifyAuthChallengeResponse": {
            "Fn::GetAtt": [
              "VerifyAuthChallengeResponseLambdaFunction",
              "Arn"
            ]
          }
        },
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireLowercase": false,
            "RequireNumbers": false,
            "RequireSymbols": false,
            "RequireUppercase": false
          }
        },
        "UsernameAttributes": [
          "email"
        ],
        "MfaConfiguration": "OFF"
      },
      "DependsOn": [
        "AuthPreSignUpLambdaFunction",
        "DefineAuthChallengeLambdaFunction",
        "CreateAuthChallengeLambdaFunction",
        "VerifyAuthChallengeResponseLambdaFunction"
      ]
    },
    "AuthPreSignUpLambdaPermissionCognitoUserPoolCognitoUserPoolTriggerSourcePreSignUp": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthPreSignUpLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCognitoUserPool",
            "Arn"
          ]
        }
      }
    },
    "DefineAuthChallengeLambdaPermissionCognitoUserPoolCognitoUserPoolTriggerSourceDefineAuthChallenge": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DefineAuthChallengeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCognitoUserPool",
            "Arn"
          ]
        }
      }
    },
    "CreateAuthChallengeLambdaPermissionCognitoUserPoolCognitoUserPoolTriggerSourceCreateAuthChallenge": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateAuthChallengeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCognitoUserPool",
            "Arn"
          ]
        }
      }
    },
    "VerifyAuthChallengeResponseLambdaPermissionCognitoUserPoolCognitoUserPoolTriggerSourceVerifyAuthChallengeResponse": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VerifyAuthChallengeResponseLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCognitoUserPool",
            "Arn"
          ]
        }
      }
    },
    "CognitoUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "dev-internote-user-pool-client",
        "UserPoolId": {
          "Ref": "CognitoUserPoolCognitoUserPool"
        },
        "ExplicitAuthFlows": [
          "CUSTOM_AUTH_FLOW_ONLY"
        ],
        "GenerateSecret": false
      }
    },
    "CognitoAuthRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRoleWithWebIdentity"
              ],
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "CognitoIdentityPool"
                  }
                },
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CognitoAuthorizedPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "mobileanalytics:PutEvents",
                    "cognito-sync:*",
                    "cognito-identity:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:Invoke"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:execute-api:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":",
                        {
                          "Fn::ImportValue": "dev-ApiGatewayRestApiId"
                        },
                        "/*"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::ImportValue": "dev-AttachmentsBucketArn"
                          },
                          "/private/",
                          "$",
                          "{cognito-identity.amazonaws.com:sub}/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::ImportValue": "dev-SpeechAudioFilesBucketArn"
                          },
                          "/private/",
                          "$",
                          "{cognito-identity.amazonaws.com:sub}/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CognitoIdentityPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "IdentityPoolName": "devInternoteIdentityPool",
        "AllowUnauthenticatedIdentities": false,
        "CognitoIdentityProviders": [
          {
            "ClientId": {
              "Ref": "CognitoUserPoolClient"
            },
            "ProviderName": {
              "Fn::GetAtt": [
                "CognitoUserPoolCognitoUserPool",
                "ProviderName"
              ]
            }
          }
        ]
      }
    },
    "CognitoIdentityPoolRoles": {
      "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
      "Properties": {
        "IdentityPoolId": {
          "Ref": "CognitoIdentityPool"
        },
        "Roles": {
          "authenticated": {
            "Fn::GetAtt": [
              "CognitoAuthRole",
              "Arn"
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "AuthPreSignUpLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthPreSignUpLambdaVersioneeiBp7nqDnDw0HYfzfxJdrhm3RWXy96wsDIpWsaQk4"
      }
    },
    "DefineAuthChallengeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DefineAuthChallengeLambdaVersionLm7Y5tLGIyo7AGVcX6kiMLbCumztyl0cO8ZnyK8nM"
      }
    },
    "CreateAuthChallengeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateAuthChallengeLambdaVersionk4s5j8dkRLTF9M1zsGVvvoTbhC0tsyDr3sLEgGW1uTs"
      }
    },
    "VerifyAuthChallengeResponseLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VerifyAuthChallengeResponseLambdaVersionvyFp54OSYFvPwPh01c7m4WG5B5L9dpRvWkOt0IX0"
      }
    },
    "UserPoolId": {
      "Value": {
        "Ref": "CognitoUserPoolCognitoUserPool"
      }
    },
    "UserPoolClientId": {
      "Value": {
        "Ref": "CognitoUserPoolClient"
      }
    },
    "IdentityPoolId": {
      "Value": {
        "Ref": "CognitoIdentityPool"
      }
    }
  }
}