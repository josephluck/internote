service: internote-auth-service

custom:
  serverless-offline:
    port: 2020
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1
  apiGateway:
    minimumCompressionSize: 1024
    restApiId:
      "Fn::ImportValue": ${self:custom.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      "Fn::ImportValue": ${self:custom.stage}-ApiGatewayRestApiRootResourceId
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource:
        - "arn:aws:ses:${self:provider.region}:*:*"
  environment:
    SES_FROM_ADDRESS: "no-reply@internote.app"

plugins:
  - serverless-plugin-monorepo
  - serverless-plugin-typescript

functions:
  authPreSignUp:
    handler: pre-sign-up.handler
    events:
      - cognitoUserPool:
          pool: CognitoUserPool
          trigger: PreSignUp
  defineAuthChallenge:
    handler: define-auth-challenge.handler
    events:
      - cognitoUserPool:
          pool: CognitoUserPool
          trigger: DefineAuthChallenge
  createAuthChallenge:
    handler: create-auth-challenge.handler
    events:
      - cognitoUserPool:
          pool: CognitoUserPool
          trigger: CreateAuthChallenge
  verifyAuthChallengeResponse:
    handler: verify-auth-challenge-response.handler
    events:
      - cognitoUserPool:
          pool: CognitoUserPool
          trigger: VerifyAuthChallengeResponse

resources:
  Resources:
    CognitoUserPoolCognitoUserPool: # see https://github.com/serverless/serverless/issues/4588
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.stage}-internote-user-pool
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
        UsernameAttributes:
          - email
        MfaConfiguration: "OFF"

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:custom.stage}-internote-user-pool-client
        UserPoolId:
          Ref: CognitoUserPoolCognitoUserPool
        ExplicitAuthFlows:
          - CUSTOM_AUTH_FLOW_ONLY
        GenerateSecret: false

    # IAM role used for authenticated users
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"

                # Allow users to invoke our API
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:execute-api:"
                        - Ref: AWS::Region
                        - ":"
                        - Ref: AWS::AccountId
                        - ":"
                        - "Fn::ImportValue": ${self:custom.stage}-ApiGatewayRestApiId
                        - "/*"

                # Allow users to upload attachments to their
                # folder inside our S3 bucket
                # - Effect: "Allow"
                #   Action:
                #     - "s3:*"
                #   Resource:
                #     - Fn::Join:
                #         - ""
                #         - - "Fn::ImportValue": ${self:custom.stage}-AttachmentsBucketArn
                #           - "/private/"
                #           - "$"
                #           - "{cognito-identity.amazonaws.com:sub}/*"

    # The federated identity for our user pool to auth with
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        # Generate a name based on the stage
        IdentityPoolName: ${self:custom.stage}InternoteIdentityPool
        # Don't allow unathenticated users
        AllowUnauthenticatedIdentities: false
        # Link to our User Pool
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: ["CognitoUserPoolCognitoUserPool", "ProviderName"]

    # IAM roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
  # Print out the Id of the User Pool and Identity Pool that are created
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPoolCognitoUserPool

    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient

    IdentityPoolId:
      Value:
        Ref: CognitoIdentityPool
